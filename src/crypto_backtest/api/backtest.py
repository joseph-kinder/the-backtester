"""
Main backtesting API
"""

import pandas as pd
import numpy as np
from typing import Dict, Callable, Any, Optional, List
from dataclasses import dataclass

from ..core.engine import BacktestEngine
from ..analysis.metrics import calculate_metrics
from ..analysis.plots import plot_results


@dataclass
class BacktestResults:
    """
    A container for the results of a backtest.

    This class stores all the essential information generated by a backtest run,
    including the equity curve, trade history, final positions, and performance metrics.
    It also provides convenient methods for plotting, summarizing, and exporting the results.

    Attributes:
        equity_curve (pd.Series): A time series of the portfolio's equity over the backtest period.
        trades (pd.DataFrame): A DataFrame containing detailed information about each trade executed.
        positions (Dict): A dictionary representing the final state of the portfolio's positions.
        metrics (Dict): A dictionary of calculated performance metrics (e.g., Sharpe ratio, max drawdown).
        initial_capital (float): The starting capital of the backtest.
        final_capital (float): The final capital of the backtest.
        final_equity (float): The final equity of the backtest (capital + unrealized PnL).
    """
    equity_curve: pd.Series
    trades: pd.DataFrame
    positions: Dict
    metrics: Dict
    initial_capital: float
    final_capital: float
    final_equity: float

    def plot(self):
        """
        Generates and displays interactive plots of the backtest results.

        This method utilizes the `plot_results` function from the analysis module
        to create a comprehensive visualization of the backtest, including the equity curve,
        drawdowns, and trade distributions.

        Returns:
            A Plotly figure object.
        """
        return plot_results(self)

    def summary(self) -> str:
        """
        Returns a string containing a summary of the backtest performance.

        The summary includes key metrics such as total return, Sharpe ratio, max drawdown,
        win rate, and the total number of trades.

        Returns:
            A formatted string with the backtest summary.
        """
        summary_lines = [
            "=== Backtest Results ===",
            f"Initial Capital: ${self.initial_capital:,.2f}",
            f"Final Equity: ${self.final_equity:,.2f}",
            f"Total Return: {self.metrics['total_return']:.2%}",
            f"Sharpe Ratio: {self.metrics['sharpe_ratio']:.2f}",
            f"Max Drawdown: {self.metrics['max_drawdown']:.2%}",
            f"Win Rate: {self.metrics['win_rate']:.2%}",
            f"Number of Trades: {len(self.trades)}",
            "="*24
        ]
        return "\n".join(summary_lines)

    def export(self, filepath: str):
        """
        Exports the BacktestResults object to a file using pickle.

        This allows for saving the complete state of the backtest results for later analysis.

        Args:
            filepath (str): The path to the file where the results will be saved.
        """
        import pickle
        with open(filepath, 'wb') as f:
            pickle.dump(self, f)


def run_backtest(
    data: Dict[str, Dict],
    strategy: Callable,
    initial_capital: float = 10000,
    params: Optional[Dict[str, Any]] = None,
    commission: float = 0.001,
    slippage_model: str = 'linear',
    slippage_bps: float = 10,
    position_limits: Optional[Dict] = None,
    risk_limits: Optional[Dict] = None,
    verbose: bool = True
) -> BacktestResults:
    """
    Runs a backtest for a given trading strategy.

    This is the main entry point for the backtesting engine. It takes market data, a strategy function,
    and various configuration parameters to simulate the strategy's performance over historical data.

    Args:
        data (Dict[str, Dict]): A dictionary containing the market data for the backtest.
            The keys are the symbols (e.g., 'BTC/USDT'), and the values are dictionaries
            of dataframes for different timeframes (e.g., '1h', '4h').
        strategy (Callable): The trading strategy function to be backtested. This function
            should accept the current market data and portfolio state and return a list of orders.
        initial_capital (float, optional): The initial capital to start the backtest with.
            Defaults to 10,000.
        params (Optional[Dict[str, Any]], optional): A dictionary of parameters to be passed
            to the strategy function. Defaults to None.
        commission (float, optional): The trading commission fee as a fraction of the trade value.
            Defaults to 0.001 (0.1%).
        slippage_model (str, optional): The model to use for simulating slippage.
            Can be 'zero', 'linear', or 'square_root'. Defaults to 'linear'.
        slippage_bps (float, optional): The slippage in basis points. Defaults to 10.
        position_limits (Optional[Dict], optional): A dictionary specifying the maximum
            position size for each asset. Defaults to None.
        risk_limits (Optional[Dict], optional): A dictionary specifying risk management limits,
            such as max drawdown. Defaults to None.
        verbose (bool, optional): If True, a progress bar will be displayed during the backtest.
            Defaults to True.

    Returns:
        BacktestResults: An object containing the results of the backtest.
    """
    # Initialize engine
    engine = BacktestEngine(
        data=data,
        initial_capital=initial_capital,
        commission=commission,
        slippage_model=slippage_model,
        slippage_bps=slippage_bps,
        position_limits=position_limits,
        risk_limits=risk_limits,
        verbose=verbose
    )

    # Run backtest
    raw_results = engine.run(strategy, params)

    # Calculate metrics
    metrics = calculate_metrics(
        equity_curve=raw_results['equity_curve'],
        trades=raw_results['trades'],
        initial_capital=initial_capital
    )

    # Create results object
    results = BacktestResults(
        equity_curve=raw_results['equity_curve'],
        trades=raw_results['trades'],
        positions=raw_results['final_portfolio'],
        metrics=metrics,
        initial_capital=raw_results['initial_capital'],
        final_capital=raw_results['final_capital'],
        final_equity=raw_results['final_equity']
    )

    return results
